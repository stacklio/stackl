{{> partial_header }}

import re  # noqa: F401
import sys  # noqa: F401
import six

from {{packageName}}.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
{{#models}}
{{#model}}
{{#imports}}
{{#-first}}

def lazy_import():
{{/-first}}
    {{{.}}}
{{/imports}}


{{^interfaces}}
{{#isArray}}
{{> model_templates/model_simple }}
{{/isArray}}
{{#isEnum}}
{{> model_templates/model_simple }}
{{/isEnum}}
{{#isAlias}}
{{> model_templates/model_simple }}
{{/isAlias}}
{{^isArray}}
{{^isEnum}}
{{^isAlias}}
{{> model_templates/model_normal }}
{{/isAlias}}
{{/isEnum}}
{{/isArray}}
{{/interfaces}}
{{#interfaces}}
{{#-last}}
{{> model_templates/model_composed }}
{{/-last}}
{{/interfaces}}

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = {item[0]: (item[1].to_dict() if hasattr(item[1], "to_dict") else (
                    [x.to_dict() if hasattr(x, "to_dict") else x for x in item[1]]
                    if isinstance(item[1], list)
                else item[1]) )
                for item in value.items()}
            else:
                result[attr] = value
        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, {{classname}}):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, {{classname}}):
            return True

        return self.to_dict() != other.to_dict()
{{/model}}
{{/models}}
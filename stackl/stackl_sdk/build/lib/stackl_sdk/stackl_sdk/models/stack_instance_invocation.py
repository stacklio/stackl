# coding: utf-8

"""
    FastAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class StackInstanceInvocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'params': 'object',
        'stack_infrastructure_template': 'str',
        'stack_application_template': 'str',
        'stack_instance_name': 'str'
    }

    attribute_map = {
        'params': 'params',
        'stack_infrastructure_template': 'stack_infrastructure_template',
        'stack_application_template': 'stack_application_template',
        'stack_instance_name': 'stack_instance_name'
    }

    def __init__(self, params=None, stack_infrastructure_template=None, stack_application_template=None, stack_instance_name=None):  # noqa: E501
        """StackInstanceInvocation - a model defined in Swagger"""  # noqa: E501
        self._params = None
        self._stack_infrastructure_template = None
        self._stack_application_template = None
        self._stack_instance_name = None
        self.discriminator = None
        if params is not None:
            self.params = params
        self.stack_infrastructure_template = stack_infrastructure_template
        self.stack_application_template = stack_application_template
        self.stack_instance_name = stack_instance_name

    @property
    def params(self):
        """Gets the params of this StackInstanceInvocation.  # noqa: E501


        :return: The params of this StackInstanceInvocation.  # noqa: E501
        :rtype: object
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this StackInstanceInvocation.


        :param params: The params of this StackInstanceInvocation.  # noqa: E501
        :type: object
        """

        self._params = params

    @property
    def stack_infrastructure_template(self):
        """Gets the stack_infrastructure_template of this StackInstanceInvocation.  # noqa: E501


        :return: The stack_infrastructure_template of this StackInstanceInvocation.  # noqa: E501
        :rtype: str
        """
        return self._stack_infrastructure_template

    @stack_infrastructure_template.setter
    def stack_infrastructure_template(self, stack_infrastructure_template):
        """Sets the stack_infrastructure_template of this StackInstanceInvocation.


        :param stack_infrastructure_template: The stack_infrastructure_template of this StackInstanceInvocation.  # noqa: E501
        :type: str
        """
        if stack_infrastructure_template is None:
            raise ValueError("Invalid value for `stack_infrastructure_template`, must not be `None`")  # noqa: E501

        self._stack_infrastructure_template = stack_infrastructure_template

    @property
    def stack_application_template(self):
        """Gets the stack_application_template of this StackInstanceInvocation.  # noqa: E501


        :return: The stack_application_template of this StackInstanceInvocation.  # noqa: E501
        :rtype: str
        """
        return self._stack_application_template

    @stack_application_template.setter
    def stack_application_template(self, stack_application_template):
        """Sets the stack_application_template of this StackInstanceInvocation.


        :param stack_application_template: The stack_application_template of this StackInstanceInvocation.  # noqa: E501
        :type: str
        """
        if stack_application_template is None:
            raise ValueError("Invalid value for `stack_application_template`, must not be `None`")  # noqa: E501

        self._stack_application_template = stack_application_template

    @property
    def stack_instance_name(self):
        """Gets the stack_instance_name of this StackInstanceInvocation.  # noqa: E501


        :return: The stack_instance_name of this StackInstanceInvocation.  # noqa: E501
        :rtype: str
        """
        return self._stack_instance_name

    @stack_instance_name.setter
    def stack_instance_name(self, stack_instance_name):
        """Sets the stack_instance_name of this StackInstanceInvocation.


        :param stack_instance_name: The stack_instance_name of this StackInstanceInvocation.  # noqa: E501
        :type: str
        """
        if stack_instance_name is None:
            raise ValueError("Invalid value for `stack_instance_name`, must not be `None`")  # noqa: E501

        self._stack_instance_name = stack_instance_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StackInstanceInvocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StackInstanceInvocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

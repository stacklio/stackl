# coding: utf-8

"""
    FastAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class StackInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'deleted': 'bool',
        'services': 'dict(str, StackInstanceService)',
        'type': 'str',
        'category': 'str'
    }

    attribute_map = {
        'name': 'name',
        'deleted': 'deleted',
        'services': 'services',
        'type': 'type',
        'category': 'category'
    }

    def __init__(self, name=None, deleted=False, services=None, type='stack_instance', category='items'):  # noqa: E501
        """StackInstance - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._deleted = None
        self._services = None
        self._type = None
        self._category = None
        self.discriminator = None
        self.name = name
        if deleted is not None:
            self.deleted = deleted
        if services is not None:
            self.services = services
        if type is not None:
            self.type = type
        if category is not None:
            self.category = category

    @property
    def name(self):
        """Gets the name of this StackInstance.  # noqa: E501


        :return: The name of this StackInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StackInstance.


        :param name: The name of this StackInstance.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def deleted(self):
        """Gets the deleted of this StackInstance.  # noqa: E501


        :return: The deleted of this StackInstance.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this StackInstance.


        :param deleted: The deleted of this StackInstance.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def services(self):
        """Gets the services of this StackInstance.  # noqa: E501


        :return: The services of this StackInstance.  # noqa: E501
        :rtype: dict(str, StackInstanceService)
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this StackInstance.


        :param services: The services of this StackInstance.  # noqa: E501
        :type: dict(str, StackInstanceService)
        """

        self._services = services

    @property
    def type(self):
        """Gets the type of this StackInstance.  # noqa: E501


        :return: The type of this StackInstance.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StackInstance.


        :param type: The type of this StackInstance.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def category(self):
        """Gets the category of this StackInstance.  # noqa: E501


        :return: The category of this StackInstance.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this StackInstance.


        :param category: The category of this StackInstance.  # noqa: E501
        :type: str
        """

        self._category = category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StackInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StackInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
